// #Sireum

package tc.TempControlMixedSeL4CAmKES

import org.sireum._
import tc.util.Profile
import tc.util.EmptyContainer
import tc.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@msig trait TempControl_tcp_tct_Profile_Trait extends Profile

@record class TempControl_tcp_tct_Profile (
  val name: String,
) extends TempControl_tcp_tct_Profile_Trait {

  override def next: EmptyContainer = {
    return EmptyContainer()
  }
}

// Profile with generators for incoming ports
@msig trait TempControl_tcp_tct_Profile_P_Trait extends Profile {
  def api_tempChanged: RandomLib // random lib for generating art.Empty
  def api_fanAck: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.FanAck
  def api_setPoint: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.SetPoint
  def api_currentTemp: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.Temperature
}

@record class TempControl_tcp_tct_Profile_P(
  val name: String,
  var api_tempChanged: RandomLib, // random lib for generating art.Empty
  var api_fanAck: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.FanAck
  var api_setPoint: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.SetPoint
  var api_currentTemp: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.Temperature
  ) extends TempControl_tcp_tct_Profile_P_Trait {

  override def next: TempControl_tcp_tct_PreState_Container_P = {
    return (TempControl_tcp_tct_PreState_Container_P (
      api_tempChanged = api_tempChanged.nextOption_artEmpty(),
      api_fanAck = api_fanAck.nextOptionTempControlMixedSeL4CAmKESFanAckType(),
      api_setPoint = api_setPoint.nextOptionTempControlMixedSeL4CAmKESSetPoint(),
      api_currentTemp = api_currentTemp.nextTempControlMixedSeL4CAmKESTemperature()))
  }
}

// Profile with generators for state variables and incoming ports
@msig trait TempControl_tcp_tct_Profile_PS_Trait extends TempControl_tcp_tct_Profile_P_Trait {
  def In_currentFanState: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.FanCmd
  def In_currentSetPoint: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.SetPoint
  def In_fanError: RandomLib // random lib for generating Base_Types.Boolean
  def In_latestTemp: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.Temperature
  def api_tempChanged: RandomLib // random lib for generating art.Empty
  def api_fanAck: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.FanAck
  def api_setPoint: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.SetPoint
  def api_currentTemp: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.Temperature
}

@record class TempControl_tcp_tct_Profile_PS(
  val name: String,
  var In_currentFanState: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.FanCmd
  var In_currentSetPoint: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.SetPoint
  var In_fanError: RandomLib, // random lib for generating Base_Types.Boolean
  var In_latestTemp: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.Temperature
  var api_tempChanged: RandomLib, // random lib for generating art.Empty
  var api_fanAck: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.FanAck
  var api_setPoint: RandomLib, // random lib for generating TempControlMixedSeL4CAmKES.SetPoint
  var api_currentTemp: RandomLib // random lib for generating TempControlMixedSeL4CAmKES.Temperature
  ) extends TempControl_tcp_tct_Profile_PS_Trait {

  override def next: TempControl_tcp_tct_PreState_Container_PS = {
    return (TempControl_tcp_tct_PreState_Container_PS (
      In_currentFanState = In_currentFanState.nextTempControlMixedSeL4CAmKESFanCmdType(),
      In_currentSetPoint = In_currentSetPoint.nextTempControlMixedSeL4CAmKESSetPoint(),
      In_fanError = In_fanError.nextB(),
      In_latestTemp = In_latestTemp.nextTempControlMixedSeL4CAmKESTemperature(),
      api_tempChanged = api_tempChanged.nextOption_artEmpty(),
      api_fanAck = api_fanAck.nextOptionTempControlMixedSeL4CAmKESFanAckType(),
      api_setPoint = api_setPoint.nextOptionTempControlMixedSeL4CAmKESSetPoint(),
      api_currentTemp = api_currentTemp.nextTempControlMixedSeL4CAmKESTemperature()))
  }
}
