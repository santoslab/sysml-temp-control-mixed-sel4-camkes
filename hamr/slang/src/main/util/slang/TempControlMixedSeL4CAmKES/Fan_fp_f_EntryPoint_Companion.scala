// #Sireum

package slang.TempControlMixedSeL4CAmKES

import org.sireum._
import art._
import slang._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Fan_fp_f_EntryPoint_Companion {

  var preStateContainer_wL: Option[Fan_fp_f_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Fan_fp_f_PostState_Container_PS(
        api_fanAck = 
          if (Art.observeOutPortVariable(Arch.TempControlSystem_Instance_fp_f.operational_api.fanAck_Id).nonEmpty)
            Some(Art.observeOutPortVariable(Arch.TempControlSystem_Instance_fp_f.operational_api.fanAck_Id).get.asInstanceOf[TempControlMixedSeL4CAmKES.FanAck_Payload].value)
          else None())

    // the rest can now be performed via a different thread
    slang.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.TempControlSystem_Instance_fp_f.id, slang.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_f_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      Fan_fp_f_PreState_Container_PS(
        api_fanCmd = 
          if (Art.observeInPortVariable(Arch.TempControlSystem_Instance_fp_f.operational_api.fanCmd_Id).nonEmpty)
            Some(Art.observeInPortVariable(Arch.TempControlSystem_Instance_fp_f.operational_api.fanCmd_Id).get.asInstanceOf[TempControlMixedSeL4CAmKES.FanCmd_Payload].value)
          else None()))

    // the rest can now be performed via a different thread
    slang.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.TempControlSystem_Instance_fp_f.id, slang.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_f_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Fan_fp_f_PostState_Container_PS(
        api_fanAck = 
          if (Art.observeOutPortVariable(Arch.TempControlSystem_Instance_fp_f.operational_api.fanAck_Id).nonEmpty)
            Some(Art.observeOutPortVariable(Arch.TempControlSystem_Instance_fp_f.operational_api.fanAck_Id).get.asInstanceOf[TempControlMixedSeL4CAmKES.FanAck_Payload].value)
          else None())

    // the rest can now be performed via a different thread
    slang.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.TempControlSystem_Instance_fp_f.id, slang.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_f_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}