// #Sireum

package tc

import org.sireum._
import art._
import art.PortMode._
import art.DispatchPropertyProtocol._
import art.Art.BridgeId._
import art.Art.PortId._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Arch {
  val TempControlSystem_Instance_tsp_tst : tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge = {
    val currentTemp = Port[TempControlMixedSeL4CAmKES.Temperature] (id = portId"0", name = "TempControlSystem_Instance_tsp_tst_currentTemp", mode = DataOut)
    val tempChanged = Port[art.Empty] (id = portId"1", name = "TempControlSystem_Instance_tsp_tst_tempChanged", mode = EventOut)

    tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge(
      id = bridgeId"0",
      name = "TempControlSystem_Instance_tsp_tst",
      dispatchProtocol = Periodic(period = 1000),
      dispatchTriggers = None(),

      currentTemp = currentTemp,
      tempChanged = tempChanged
    )
  }
  val TempControlSystem_Instance_tcp_tct : tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge = {
    val currentTemp = Port[TempControlMixedSeL4CAmKES.Temperature] (id = portId"2", name = "TempControlSystem_Instance_tcp_tct_currentTemp", mode = DataIn)
    val tempChanged = Port[art.Empty] (id = portId"3", name = "TempControlSystem_Instance_tcp_tct_tempChanged", mode = EventIn)
    val fanAck = Port[TempControlMixedSeL4CAmKES.FanAck.Type] (id = portId"4", name = "TempControlSystem_Instance_tcp_tct_fanAck", mode = EventIn)
    val setPoint = Port[TempControlMixedSeL4CAmKES.SetPoint] (id = portId"5", name = "TempControlSystem_Instance_tcp_tct_setPoint", mode = EventIn)
    val fanCmd = Port[TempControlMixedSeL4CAmKES.FanCmd.Type] (id = portId"6", name = "TempControlSystem_Instance_tcp_tct_fanCmd", mode = EventOut)

    tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge(
      id = bridgeId"1",
      name = "TempControlSystem_Instance_tcp_tct",
      dispatchProtocol = Sporadic(min = 1000),
      dispatchTriggers = None(),

      currentTemp = currentTemp,
      tempChanged = tempChanged,
      fanAck = fanAck,
      setPoint = setPoint,
      fanCmd = fanCmd
    )
  }
  val TempControlSystem_Instance_fp_ft : tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge = {
    val fanCmd = Port[TempControlMixedSeL4CAmKES.FanCmd.Type] (id = portId"7", name = "TempControlSystem_Instance_fp_ft_fanCmd", mode = EventIn)
    val fanAck = Port[TempControlMixedSeL4CAmKES.FanAck.Type] (id = portId"8", name = "TempControlSystem_Instance_fp_ft_fanAck", mode = EventOut)

    tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge(
      id = bridgeId"2",
      name = "TempControlSystem_Instance_fp_ft",
      dispatchProtocol = Sporadic(min = 1),
      dispatchTriggers = None(),

      fanCmd = fanCmd,
      fanAck = fanAck
    )
  }

  val ad : ArchitectureDescription = {
    TranspilerUtil.touch()

    ArchitectureDescription(
      components = IS[Art.BridgeId, Bridge] (TempControlSystem_Instance_tsp_tst, TempControlSystem_Instance_tcp_tct, TempControlSystem_Instance_fp_ft),

      connections = IS[Art.ConnectionId, UConnection] (Connection(from = TempControlSystem_Instance_tsp_tst.currentTemp, to = TempControlSystem_Instance_tcp_tct.currentTemp),
                                                       Connection(from = TempControlSystem_Instance_tsp_tst.tempChanged, to = TempControlSystem_Instance_tcp_tct.tempChanged),
                                                       Connection(from = TempControlSystem_Instance_tcp_tct.fanCmd, to = TempControlSystem_Instance_fp_ft.fanCmd),
                                                       Connection(from = TempControlSystem_Instance_fp_ft.fanAck, to = TempControlSystem_Instance_tcp_tct.fanAck))
    )
  }
}

object TranspilerUtil {
  def touch(): Unit = {
    if(F) {
      TranspilerToucher.touch()

      // add types used in Platform.receive and Platform.receiveAsync
      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId"0", Base_Types.Boolean_Payload(T))
      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId"0", None())

      // touch process/thread timing properties
      println(Schedulers.TempControlSystem_Instance_proc_timingProperties)
      println(Schedulers.TempControlSystem_Instance_tsp_tst_timingProperties)
      println(Schedulers.TempControlSystem_Instance_tcp_tct_timingProperties)
      println(Schedulers.TempControlSystem_Instance_fp_ft_timingProperties)

      // touch each payload/type in case some are only used as a field in a record
      def printDataContent(a: art.DataContent): Unit = { println(s"${a}") }

      printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_example()))
      printDataContent(Base_Types.Integer_Payload(Base_Types.Integer_example()))
      printDataContent(Base_Types.Integer_8_Payload(Base_Types.Integer_8_example()))
      printDataContent(Base_Types.Integer_16_Payload(Base_Types.Integer_16_example()))
      printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_example()))
      printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_example()))
      printDataContent(Base_Types.Unsigned_8_Payload(Base_Types.Unsigned_8_example()))
      printDataContent(Base_Types.Unsigned_16_Payload(Base_Types.Unsigned_16_example()))
      printDataContent(Base_Types.Unsigned_32_Payload(Base_Types.Unsigned_32_example()))
      printDataContent(Base_Types.Unsigned_64_Payload(Base_Types.Unsigned_64_example()))
      printDataContent(Base_Types.Float_Payload(Base_Types.Float_example()))
      printDataContent(Base_Types.Float_32_Payload(Base_Types.Float_32_example()))
      printDataContent(Base_Types.Float_64_Payload(Base_Types.Float_64_example()))
      printDataContent(Base_Types.Character_Payload(Base_Types.Character_example()))
      printDataContent(Base_Types.String_Payload(Base_Types.String_example()))
      printDataContent(TempControlMixedSeL4CAmKES.Temperature_Payload(TempControlMixedSeL4CAmKES.Temperature.example()))
      printDataContent(TempControlMixedSeL4CAmKES.TempUnit_Payload(TempControlMixedSeL4CAmKES.TempUnit.byOrdinal(0).get))
      printDataContent(TempControlMixedSeL4CAmKES.SetPoint_Payload(TempControlMixedSeL4CAmKES.SetPoint.example()))
      printDataContent(TempControlMixedSeL4CAmKES.FanCmd_Payload(TempControlMixedSeL4CAmKES.FanCmd.byOrdinal(0).get))
      printDataContent(TempControlMixedSeL4CAmKES.FanAck_Payload(TempControlMixedSeL4CAmKES.FanAck.byOrdinal(0).get))
      printDataContent(Isolette_Environment.Heat_Payload(Isolette_Environment.Heat.example()))
      printDataContent(Isolette_Environment.Interface_Interaction_Payload(Isolette_Environment.Interface_Interaction.example()))
      printDataContent(Isolette_Environment.Air_Interaction_Payload(Isolette_Environment.Air_Interaction.example()))
      printDataContent(TempControlMixed.Temperature_Payload(TempControlMixed.Temperature.example()))
      printDataContent(TempControlMixed.SetPoint_Payload(TempControlMixed.SetPoint.example()))
      printDataContent(TempControlMixed.TempUnit_Payload(TempControlMixed.TempUnit.byOrdinal(0).get))
      printDataContent(TempControlMixed.FanCmd_Payload(TempControlMixed.FanCmd.byOrdinal(0).get))
      printDataContent(TempControlMixed.FanAck_Payload(TempControlMixed.FanAck.byOrdinal(0).get))
      printDataContent(TempControlPeriodic.Temperature_Payload(TempControlPeriodic.Temperature.example()))
      printDataContent(TempControlPeriodic.SetPoint_Payload(TempControlPeriodic.SetPoint.example()))
      printDataContent(TempControlPeriodic.TempUnit_Payload(TempControlPeriodic.TempUnit.byOrdinal(0).get))
      printDataContent(TempControlPeriodic.FanCmd_Payload(TempControlPeriodic.FanCmd.byOrdinal(0).get))
      printDataContent(TempControlPeriodic.FanAck_Payload(TempControlPeriodic.FanAck.byOrdinal(0).get))
      printDataContent(Isolette_Data_Model.PhysicalTemp_Payload(Isolette_Data_Model.PhysicalTemp.example()))
      printDataContent(Isolette_Data_Model.TempWstatus_Payload(Isolette_Data_Model.TempWstatus.example()))
      printDataContent(Isolette_Data_Model.Temp_Payload(Isolette_Data_Model.Temp.example()))
      printDataContent(Isolette_Data_Model.On_Off_Payload(Isolette_Data_Model.On_Off.byOrdinal(0).get))
      printDataContent(Isolette_Data_Model.Failure_Flag_Payload(Isolette_Data_Model.Failure_Flag.example()))
      printDataContent(Isolette_Data_Model.ValueStatus_Payload(Isolette_Data_Model.ValueStatus.byOrdinal(0).get))
      printDataContent(Isolette_Data_Model.Status_Payload(Isolette_Data_Model.Status.byOrdinal(0).get))
      printDataContent(Isolette_Data_Model.Regulator_Mode_Payload(Isolette_Data_Model.Regulator_Mode.byOrdinal(0).get))
      printDataContent(Isolette_Data_Model.Monitor_Mode_Payload(Isolette_Data_Model.Monitor_Mode.byOrdinal(0).get))
      printDataContent(art.Empty())

      {
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_initialization_api.get.logInfo("")
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_initialization_api.get.logDebug("")
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_initialization_api.get.logError("")
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_operational_api.get.logInfo("")
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_operational_api.get.logDebug("")
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_operational_api.get.logError("")
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_initialization_api.get.put_currentTemp(TempControlMixedSeL4CAmKES.Temperature.example())
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_operational_api.get.put_currentTemp(TempControlMixedSeL4CAmKES.Temperature.example())
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_initialization_api.get.put_tempChanged()
        tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_Bridge.c_operational_api.get.put_tempChanged()
      }
      {
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_initialization_api.get.logInfo("")
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_initialization_api.get.logDebug("")
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_initialization_api.get.logError("")
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.logInfo("")
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.logDebug("")
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.logError("")
        val apiUsage_currentTemp: Option[TempControlMixedSeL4CAmKES.Temperature] = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.get_currentTemp()
        val apiUsage_tempChanged: Option[art.Empty] = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.get_tempChanged()
        val apiUsage_fanAck: Option[TempControlMixedSeL4CAmKES.FanAck.Type] = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.get_fanAck()
        val apiUsage_setPoint: Option[TempControlMixedSeL4CAmKES.SetPoint] = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.get_setPoint()
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_initialization_api.get.put_fanCmd(TempControlMixedSeL4CAmKES.FanCmd.byOrdinal(0).get)
        tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_Bridge.c_operational_api.get.put_fanCmd(TempControlMixedSeL4CAmKES.FanCmd.byOrdinal(0).get)
      }
      {
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_initialization_api.get.logInfo("")
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_initialization_api.get.logDebug("")
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_initialization_api.get.logError("")
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_operational_api.get.logInfo("")
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_operational_api.get.logDebug("")
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_operational_api.get.logError("")
        val apiUsage_fanCmd: Option[TempControlMixedSeL4CAmKES.FanCmd.Type] = tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_operational_api.get.get_fanCmd()
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_initialization_api.get.put_fanAck(TempControlMixedSeL4CAmKES.FanAck.byOrdinal(0).get)
        tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_Bridge.c_operational_api.get.put_fanAck(TempControlMixedSeL4CAmKES.FanAck.byOrdinal(0).get)
      }
    }
  }
}

