// #Sireum

package tc.TempControlPeriodic

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Temperature {
  def example(): TempControlPeriodic.Temperature = {
    return TempControlPeriodic.Temperature(
      degrees = Base_Types.Float_32_example(),
      unit = TempControlPeriodic.TempUnit.byOrdinal(0).get)
  }

  /** invariant AbsZero
    */
  @strictpure def AbsZero_Invariant(value: TempControlPeriodic.Temperature): B =
    value.degrees >= GUMBO_Periodic_Definitions.GUMBO__Library.absoluteZero()

  /** D-Inv Data Invariant for TempControlPeriodic.Temperature
    */
  @strictpure def D_Inv_Temperature(value: TempControlPeriodic.Temperature): B =
    (AbsZero_Invariant(value))

  /** D-Inv-Guard Data Invariant for TempControlPeriodic.Temperature
    */
  @strictpure def D_Inv_Guard_Temperature(value: Option[TempControlPeriodic.Temperature]): B =
    value.nonEmpty -->: D_Inv_Temperature(value.get)
}

@datatype class Temperature(
  val degrees: F32,
  val unit: TempControlPeriodic.TempUnit.Type) {
  @spec def AbsZero = Invariant(
    degrees >= GUMBO_Periodic_Definitions.GUMBO__Library.absoluteZero()
  )
}

object Temperature_Payload {
  def example(): Temperature_Payload = {
    return Temperature_Payload(TempControlPeriodic.Temperature.example())
  }
}

@datatype class Temperature_Payload(value: TempControlPeriodic.Temperature) extends art.DataContent
