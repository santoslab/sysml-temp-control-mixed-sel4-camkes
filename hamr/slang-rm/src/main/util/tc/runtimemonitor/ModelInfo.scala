// #Sireum
package tc.runtimemonitor

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ModelInfo {
  val TempSensor_tsp_tst_MI : Component =
    Component(
      name = "TempSensor_tsp_tst",
      id = Arch.TempControlSystem_Instance_tsp_tst.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "currentTemp",
          id = Arch.TempControlSystem_Instance_tsp_tst.currentTemp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "tempChanged",
          id = Arch.TempControlSystem_Instance_tsp_tst.tempChanged.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = "")))

  val TempControl_tcp_tct_MI : Component =
    Component(
      name = "TempControl_tcp_tct",
      id = Arch.TempControlSystem_Instance_tcp_tct.id.toZ,
      dispatchProtocol = iDispatchProtocol.Sporadic,
      state = ISZ(
        StateVariable(
          name = "In_currentSetPoint",
          id = 0,
          direction = StateDirection.In,
          slangType = "TempControlMixedSeL4CAmKES.SetPoint"),
        StateVariable(
          name = "In_currentFanState",
          id = 1,
          direction = StateDirection.In,
          slangType = "TempControlMixedSeL4CAmKES.FanCmd.Type"),
        StateVariable(
          name = "In_latestTemp",
          id = 2,
          direction = StateDirection.In,
          slangType = "TempControlMixedSeL4CAmKES.Temperature"),
        StateVariable(
          name = "In_fanError",
          id = 3,
          direction = StateDirection.In,
          slangType = "Base_Types.Boolean"),
        StateVariable(
          name = "currentSetPoint",
          id = 0,
          direction = StateDirection.Out,
          slangType = "TempControlMixedSeL4CAmKES.SetPoint"),
        StateVariable(
          name = "currentFanState",
          id = 1,
          direction = StateDirection.Out,
          slangType = "TempControlMixedSeL4CAmKES.FanCmd.Type"),
        StateVariable(
          name = "latestTemp",
          id = 2,
          direction = StateDirection.Out,
          slangType = "TempControlMixedSeL4CAmKES.Temperature"),
        StateVariable(
          name = "fanError",
          id = 3,
          direction = StateDirection.Out,
          slangType = "Base_Types.Boolean"),
        Port(
          name = "currentTemp",
          id = Arch.TempControlSystem_Instance_tcp_tct.currentTemp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "tempChanged",
          id = Arch.TempControlSystem_Instance_tcp_tct.tempChanged.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "fanAck",
          id = Arch.TempControlSystem_Instance_tcp_tct.fanAck.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "setPoint",
          id = Arch.TempControlSystem_Instance_tcp_tct.setPoint.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "fanCmd",
          id = Arch.TempControlSystem_Instance_tcp_tct.fanCmd.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = "")))

  val Fan_fp_ft_MI : Component =
    Component(
      name = "Fan_fp_ft",
      id = Arch.TempControlSystem_Instance_fp_ft.id.toZ,
      dispatchProtocol = iDispatchProtocol.Sporadic,
      state = ISZ(
        Port(
          name = "fanCmd",
          id = Arch.TempControlSystem_Instance_fp_ft.fanCmd.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "fanAck",
          id = Arch.TempControlSystem_Instance_fp_ft.fanAck.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = "")))

  val modelInfo: ModelInfo =
    ModelInfo(ISZ(
     TempSensor_tsp_tst_MI,
     TempControl_tcp_tct_MI,
     Fan_fp_ft_MI))
}

@datatype class ModelInfo(val components: ISZ[Component])

@datatype class Component(val name: String,
                          val id: Z,
                          val dispatchProtocol: iDispatchProtocol.Type,
                          val state: ISZ[StateElement])

@enum object iDispatchProtocol {
  "Sporadic"
  "Periodic"
}

@enum object StateDirection {
  "In"
  "Out"
}

@sig trait StateElement {
  def name: String

  def id: Z

  def slangType: String

  def direction: StateDirection.Type
}

@enum object PortKind {
  "Data"
  "Event"
  "EventData"
}

@datatype class Port(val name: String,
                     val id: Z,
                     val kind: PortKind.Type,
                     val direction: StateDirection.Type,
                     val slangType: String) extends StateElement

@datatype class StateVariable(val name: String,
                              val id: Z,
                              val direction: StateDirection.Type,
                              val slangType: String) extends StateElement
