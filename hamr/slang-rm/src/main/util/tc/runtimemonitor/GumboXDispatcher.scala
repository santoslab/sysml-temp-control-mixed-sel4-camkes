// #Sireum

package tc.runtimemonitor

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object GumboXDispatcher {
  def checkContract(observationKind: ObservationKind.Type, preContainer: Option[art.DataContent], postContainer: Option[art.DataContent]): B = {
    observationKind match {
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_postInit =>
        val result: B = tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_PostState_Container_PS])
        //println(s"tst.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_preCompute =>
        // checking the pre-state values of tst's compute entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_postCompute =>
        val result: B = tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_PreState_Container_PS], postContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_PostState_Container_PS])
        //println(s"tst.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_postInit =>
        val result: B = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PostState_Container_PS])
        //println(s"tct.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_preCompute =>
        val result: B = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PreState_Container_PS])
        //println(s"tct.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_postCompute =>
        val result: B = tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PreState_Container_PS], postContainer.get.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PostState_Container_PS])
        //println(s"tct.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_ft_postInit =>
        // checking the post-state values of ft's initialise entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_ft_preCompute =>
        // checking the pre-state values of ft's compute entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_ft_postCompute =>
        // checking the post-state values of ft's compute entrypoint is not required
        return T

      case _ => halt("Infeasible")
    }
  }

  def genTestSuite(testCases: ISZ[(Z, ISZ[ST])]): Unit = {
    val tq = "\"\"\""

    val testRoot = Os.path(".") / "src" / "test" / "bridge"

    val TempSensor_tsp_tst_id = Arch.TempControlSystem_Instance_tsp_tst.id
    val TempControl_tcp_tct_id = Arch.TempControlSystem_Instance_tcp_tct.id
    val Fan_fp_ft_id = Arch.TempControlSystem_Instance_fp_ft.id

    def genUniqueSuiteName(path: Os.Path, prefix: String): String = {
      var i = 0
      while(true) {
        val cand = path / s"${prefix}_${i}.scala"
        if (!cand.exists) {
          return s"${prefix}_${i}"
        }
        i = i + 1
      }
      halt("Infeasible")
    }

    for (p <- testCases) {
      art.Art.BridgeId.fromZ(p._1) match {
        case TempSensor_tsp_tst_id =>
          val prefix = "TempSensor_tsp_tst_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","TempControlMixedSeL4CAmKES")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.TempControlMixedSeL4CAmKES
                |
                |import org.sireum._
                |import tc.TempControlMixedSeL4CAmKES._
                |
                |class ${suiteName} extends TempSensor_tsp_tst_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = T
                |
                |  ${p._2}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case TempControl_tcp_tct_id =>
          val prefix = "TempControl_tcp_tct_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","TempControlMixedSeL4CAmKES")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.TempControlMixedSeL4CAmKES
                |
                |import org.sireum._
                |import tc.TempControlMixedSeL4CAmKES._
                |
                |class ${suiteName} extends TempControl_tcp_tct_ScalaTest {
                |  val verbose: B = T
                |
                |  ${p._2}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Fan_fp_ft_id =>
          val prefix = "Fan_fp_ft_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","TempControlMixedSeL4CAmKES")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.TempControlMixedSeL4CAmKES
                |
                |import org.sireum._
                |import tc.TempControlMixedSeL4CAmKES._
                |
                |class ${suiteName} extends Fan_fp_ft_ScalaTest {
                |  val verbose: B = T
                |
                |  ${p._2}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case x => halt(s"Infeasible bridge id: $x")
      }
    }
  }

  def genTestCase(observationKind: ObservationKind.Type, preContainer: Option[String], postContainer: Option[String], testNameSuffix: Option[String]): ST = {
    val tq = "\"\"\""
    val suffix: String =
      if (testNameSuffix.nonEmpty) testNameSuffix.get
      else ""

    observationKind match {
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_postInit =>
        return (st"""// Begin test cases for TempControlSystem_Instance_tsp_tst_postInit
                    |
                    |test(s"TempControlSystem_Instance_tsp_tst_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempSensor_tsp_tst_PostState_Container_PS(postJson).left
                    |  assert(tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for TempControlSystem_Instance_tsp_tst_postInit""")
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_postCompute =>
        return (st"""// Begin test cases for TempControlSystem_Instance_tsp_tst_postCompute
                    |
                    |test(s"TempControlSystem_Instance_tsp_tst_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempSensor_tsp_tst_PreState_Container_PS(preJson).left
                    |  val postContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempSensor_tsp_tst_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for TempControlSystem_Instance_tsp_tst_postCompute""")
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_postInit =>
        return (st"""// Begin test cases for TempControlSystem_Instance_tcp_tct_postInit
                    |
                    |test(s"TempControlSystem_Instance_tcp_tct_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempControl_tcp_tct_PostState_Container_PS(postJson).left
                    |  assert(tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for TempControlSystem_Instance_tcp_tct_postInit""")
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_preCompute =>
        return (st"""// Begin test cases for TempControlSystem_Instance_tcp_tct_preCompute
                    |
                    |test(s"TempControlSystem_Instance_tcp_tct_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempControl_tcp_tct_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for TempControlSystem_Instance_tcp_tct_preCompute""")
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_postCompute =>
        return (st"""// Begin test cases for TempControlSystem_Instance_tcp_tct_postCompute
                    |
                    |test(s"TempControlSystem_Instance_tcp_tct_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempControl_tcp_tct_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"TempControlSystem_Instance_tcp_tct_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempControl_tcp_tct_PreState_Container_PS(preJson).left
                    |  val postContainer = tc.JSON.toTempControlMixedSeL4CAmKESTempControl_tcp_tct_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for TempControlSystem_Instance_tcp_tct_postCompute""")

      case _ => return st"// TODO ${observationKind}"
    }
  }

  def getUpdates(bridge_id: art.Art.BridgeId, observationKind: ObservationKind.Type, container: art.DataContent): Map[String, String] = {
    observationKind match {
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_currentTemp" ~> postContainer.api_currentTemp.string
        if (postContainer.api_tempChanged.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_tempChanged" ~> postContainer.api_tempChanged.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_currentSetPoint" ~> postContainer.currentSetPoint.string
        updates = updates + s"${bridge_id}_Out_currentFanState" ~> postContainer.currentFanState.string
        updates = updates + s"${bridge_id}_Out_latestTemp" ~> postContainer.latestTemp.string
        updates = updates + s"${bridge_id}_Out_fanError" ~> postContainer.fanError.string
        if (postContainer.api_fanCmd.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_fanCmd" ~> postContainer.api_fanCmd.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_ft_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_PostState_Container_PS]
        if (postContainer.api_fanAck.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_fanAck" ~> postContainer.api_fanAck.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_PreState_Container_PS]
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_In_currentSetPoint" ~> preContainer.In_currentSetPoint.string
        updates = updates + s"${bridge_id}_In_In_currentFanState" ~> preContainer.In_currentFanState.string
        updates = updates + s"${bridge_id}_In_In_latestTemp" ~> preContainer.In_latestTemp.string
        updates = updates + s"${bridge_id}_In_In_fanError" ~> preContainer.In_fanError.string
        updates = updates + s"${bridge_id}_In_currentTemp" ~> preContainer.api_currentTemp.string
        if (preContainer.api_tempChanged.nonEmpty) {
          updates = updates + s"${bridge_id}_In_tempChanged" ~> preContainer.api_tempChanged.get.string
        }
        if (preContainer.api_fanAck.nonEmpty) {
          updates = updates + s"${bridge_id}_In_fanAck" ~> preContainer.api_fanAck.get.string
        }
        if (preContainer.api_setPoint.nonEmpty) {
          updates = updates + s"${bridge_id}_In_setPoint" ~> preContainer.api_setPoint.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_ft_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_PreState_Container_PS]
        if (preContainer.api_fanCmd.nonEmpty) {
          updates = updates + s"${bridge_id}_In_fanCmd" ~> preContainer.api_fanCmd.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tsp_tst_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempSensor_tsp_tst_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_currentTemp" ~> postContainer.api_currentTemp.string
        if (postContainer.api_tempChanged.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_tempChanged" ~> postContainer.api_tempChanged.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_tcp_tct_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.TempControl_tcp_tct_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_currentSetPoint" ~> postContainer.currentSetPoint.string
        updates = updates + s"${bridge_id}_Out_currentFanState" ~> postContainer.currentFanState.string
        updates = updates + s"${bridge_id}_Out_latestTemp" ~> postContainer.latestTemp.string
        updates = updates + s"${bridge_id}_Out_fanError" ~> postContainer.fanError.string
        if (postContainer.api_fanCmd.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_fanCmd" ~> postContainer.api_fanCmd.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.TempControlSystem_Instance_fp_ft_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlMixedSeL4CAmKES.Fan_fp_ft_PostState_Container_PS]
        if (postContainer.api_fanAck.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_fanAck" ~> postContainer.api_fanAck.get.string
        }
        return updates
      case _ => return Map.empty
    }
  }
}