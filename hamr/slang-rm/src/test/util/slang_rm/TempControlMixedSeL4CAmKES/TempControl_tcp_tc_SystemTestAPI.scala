// #Sireum

package slang_rm.TempControlMixedSeL4CAmKES

import org.sireum._
import art._
import slang_rm.SystemTestSuiteSlang.runtimeMonitorStream
import slang_rm._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempControl_tcp_tc_SystemTestAPI {
  /** helper method to set the values of all incoming ports and state variables
    * @param In_currentFanState pre-state state variable
    * @param In_currentSetPoint pre-state state variable
    * @param In_latestTemp pre-state state variable
    * @param api_tempChanged incoming event port
    * @param api_fanAck incoming event data port
    * @param api_setPoint incoming event data port
    * @param api_currentTemp incoming data port
    */
  def put_concrete_inputs(In_currentFanState: TempControlMixedSeL4CAmKES.FanCmd.Type,
                          In_currentSetPoint: TempControlMixedSeL4CAmKES.SetPoint,
                          In_latestTemp: TempControlMixedSeL4CAmKES.Temperature,
                          api_tempChanged: Option[art.Empty],
                          api_fanAck: Option[TempControlMixedSeL4CAmKES.FanAck.Type],
                          api_setPoint: Option[TempControlMixedSeL4CAmKES.SetPoint],
                          api_currentTemp: TempControlMixedSeL4CAmKES.Temperature): Unit = {
    put_In_currentFanState(In_currentFanState)
    put_In_currentSetPoint(In_currentSetPoint)
    put_In_latestTemp(In_latestTemp)
    put_tempChanged(api_tempChanged)
    put_fanAck(api_fanAck)
    put_setPoint(api_setPoint)
    put_currentTemp(api_currentTemp)
  }

  // setter for state variable
  def put_In_currentFanState(value: TempControlMixedSeL4CAmKES.FanCmd.Type): Unit = {
    TempControl_tcp_tc.currentFanState = value
  }

  // setter for state variable
  def put_In_currentSetPoint(value: TempControlMixedSeL4CAmKES.SetPoint): Unit = {
    TempControl_tcp_tc.currentSetPoint = value
  }

  // setter for state variable
  def put_In_latestTemp(value: TempControlMixedSeL4CAmKES.Temperature): Unit = {
    TempControl_tcp_tc.latestTemp = value
  }

  // setter for incoming event  port
  def put_tempChanged(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.TempControlSystem_Instance_tcp_tc.operational_api.tempChanged_Id, v)
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_fanAck(value: Option[TempControlMixedSeL4CAmKES.FanAck.Type]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.TempControlSystem_Instance_tcp_tc.operational_api.fanAck_Id, TempControlMixedSeL4CAmKES.FanAck_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_setPoint(value: Option[TempControlMixedSeL4CAmKES.SetPoint]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.TempControlSystem_Instance_tcp_tc.operational_api.setPoint_Id, TempControlMixedSeL4CAmKES.SetPoint_Payload(v))
      case _ =>
    }
  }

  // setter for incoming data port
  def put_currentTemp(value: TempControlMixedSeL4CAmKES.Temperature): Unit = {
    Art.insertInInfrastructurePort(Arch.TempControlSystem_Instance_tcp_tc.operational_api.currentTemp_Id, TempControlMixedSeL4CAmKES.Temperature_Payload(value))
  }

  def fetchContainer(): slang_rm.TempControlMixedSeL4CAmKES.TempControl_tcp_tc_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.TempControlSystem_Instance_tcp_tc.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.TempControlSystem_Instance_tcp_tc.id).get
      return postContainer_.asInstanceOf[slang_rm.TempControlMixedSeL4CAmKES.TempControl_tcp_tc_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.TempControlSystem_Instance_tcp_tc.name}")
      halt(s"No post state recorded for ${Arch.TempControlSystem_Instance_tcp_tc.name}")
    }
  }

  def check_concrete_outputs(currentFanState: TempControlMixedSeL4CAmKES.FanCmd.Type,
                             currentSetPoint: TempControlMixedSeL4CAmKES.SetPoint,
                             latestTemp: TempControlMixedSeL4CAmKES.Temperature,
                             api_fanCmd: Option[TempControlMixedSeL4CAmKES.FanCmd.Type]): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_currentFanState = get_currentFanState()
    if (currentFanState != actual_currentFanState) {
      failureReasons = failureReasons :+ st"'currentFanState' did not match expected.  Expected: $currentFanState, Actual: $actual_currentFanState"
    }
    val actual_currentSetPoint = get_currentSetPoint()
    if (currentSetPoint != actual_currentSetPoint) {
      failureReasons = failureReasons :+ st"'currentSetPoint' did not match expected.  Expected: $currentSetPoint, Actual: $actual_currentSetPoint"
    }
    val actual_latestTemp = get_latestTemp()
    if (latestTemp != actual_latestTemp) {
      failureReasons = failureReasons :+ st"'latestTemp' did not match expected.  Expected: $latestTemp, Actual: $actual_latestTemp"
    }
    val actual_fanCmd = get_api_fanCmd()
    if (api_fanCmd != actual_fanCmd) {
      failureReasons = failureReasons :+ st"'fanCmd' did not match expected.  Expected: $api_fanCmd, Actual: $actual_fanCmd"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  // getter for state variable
  def get_currentFanState(): TempControlMixedSeL4CAmKES.FanCmd.Type = {
    return TempControl_tcp_tc.currentFanState
  }

  // getter for state variable
  def get_currentSetPoint(): TempControlMixedSeL4CAmKES.SetPoint = {
    return TempControl_tcp_tc.currentSetPoint
  }

  // getter for state variable
  def get_latestTemp(): TempControlMixedSeL4CAmKES.Temperature = {
    return TempControl_tcp_tc.latestTemp
  }

  def get_api_fanCmd(): Option[TempControlMixedSeL4CAmKES.FanCmd.Type] = {
    return fetchContainer().api_fanCmd
  }
}